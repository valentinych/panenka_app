#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3 –∏ –∑–∞–≥—Ä—É–∑–∫–∏ auth.json
"""

import os
import sys
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_s3_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 –∏ –∑–∞–≥—Ä—É–∑–∫—É auth.json"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_DEFAULT_REGION']
    s3_vars = ['AUTH_JSON_S3_BUCKET', 'AUTH_JSON_S3_KEY']
    
    logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    missing_vars = []
    for var in required_vars + s3_vars:
        value = os.getenv(var)
        if value:
            if 'KEY' in var or 'SECRET' in var:
                logger.info(f"‚úì {var}: {'*' * len(value)}")
            else:
                logger.info(f"‚úì {var}: {value}")
        else:
            logger.error(f"‚úó {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º boto3
    try:
        import boto3
        from botocore.exceptions import BotoCoreError, ClientError, NoCredentialsError
        logger.info("‚úì boto3 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ boto3: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º S3 –∫–ª–∏–µ–Ω—Ç
    try:
        logger.info("–°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç...")
        s3_client = boto3.client('s3')
        logger.info("‚úì S3 –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket
    bucket_name = os.getenv('AUTH_JSON_S3_BUCKET')
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket: {bucket_name}")
        s3_client.head_bucket(Bucket=bucket_name)
        logger.info("‚úì Bucket –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == '404':
            logger.error(f"‚úó Bucket {bucket_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif error_code == '403':
            logger.error(f"‚úó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ bucket {bucket_name}")
        else:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket: {e}")
        return False
    except Exception as e:
        logger.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ bucket: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    object_key = os.getenv('AUTH_JSON_S3_KEY', 'auth.json')
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: s3://{bucket_name}/{object_key}")
        response = s3_client.get_object(Bucket=bucket_name, Key=object_key)
        
        body = response.get('Body')
        if not body:
            logger.error("‚úó –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç S3")
            return False
        
        content = body.read()
        if isinstance(content, bytes):
            content = content.decode('utf-8')
        
        logger.info(f"‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            data = json.loads(content)
            users = data.get('users', [])
            active_users = [u for u in users if not u.get('inactive', False)]
            
            logger.info(f"‚úì JSON –≤–∞–ª–∏–¥–µ–Ω")
            logger.info(f"‚úì –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            logger.info(f"‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if active_users:
                logger.info("–ü–µ—Ä–≤—ã–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                for i, user in enumerate(active_users[:3]):
                    logger.info(f"  {i+1}. {user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (–ª–æ–≥–∏–Ω: {user.get('login', 'N/A')})")
            
            return True
            
        except json.JSONDecodeError as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return False
            
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'NoSuchKey':
            logger.error(f"‚úó –§–∞–π–ª {object_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bucket {bucket_name}")
        else:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

if __name__ == "__main__":
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    logger.info("=" * 50)
    
    success = test_s3_connection()
    
    logger.info("=" * 50)
    if success:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        logger.error("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        sys.exit(1)
